<?php
/**
 * @file
 * Code for the Alz feature.
 */

include_once 'alz.features.inc';

/**
 * Implements hook_form_alter().
 */

function alz_form_alter(&$form, $form_state, $form_id) {
  //dpm($form); #disclosure_node_form
  //drupal_set_message("Form ID is : " . $form_id);
  
  switch($form_id) {
    // To edit additional forms, make additionas case with the wanted $form_id
    case 'disclosure_node_form': 
    
      // VALIDATION on second step of the form
      if(!empty($form['#build_id_old'])) {
		  $form['#validate'][] = 'validate_disclosure';
      } else  {
      	  $form['#validate'][] = 'validate_manuscript';
      }
      
      // Get node id of selected manuscript
      
      $a = $form['field_manuscript_number_prefix'][LANGUAGE_NONE][0]['value']['#default_value'];
      $b = $form['field_number_b'][LANGUAGE_NONE][0]['value']['#default_value'];
    
      
      if (!empty($a) && !empty($a)) {
        $manuscript_nid =_get_manuscript_nid($a, $b) ;
        
        
        $manuscript_title = db_query('SELECT title FROM {node} WHERE nid ='. $manuscript_nid )->fetchField();
        //dsm($manuscript_nid);
        
        $form['field_manuscript'][LANGUAGE_NONE][0]['target_id'] = array(
               '#type' => 'item',
               '#title' =>'Manuscript',
               '#weight' => '2',
               '#default_value' => $manuscript_title,
               '#empty_option'=> '',
               '#access'=> TRUE,
               '#markup' => $manuscript_title,
            );
        
     
        $authors_list = array();
        $sql = 'SELECT n.nid, n.title 
        from {node} n 
        left join {field_data_field_author_id} fa on n.nid=fa.field_author_id_target_id
        left join {field_data_field_last_name} fln on n.nid= fln.entity_id 
        where fa.entity_id = ' . $manuscript_nid . ' ' .
        'order by fln.field_last_name_value ASC';
        
        $authors_query = db_query($sql);
        while($row = $authors_query->fetchAssoc()) {
            $key = $row['nid'];
            $value = $row['title'];
            
            //Add to author list only if disclosure has not yet been submitted
            $sql_disc='SELECT n.nid, n.type from {node} n 
			left join {field_data_field_author} fa on n.nid=fa.entity_id
			left join {field_data_field_manuscript} fm on n.nid=fm.entity_id
			where fm.field_manuscript_target_id = ' . $manuscript_nid . ' ' .
			'and fa.field_author_target_id= ' . $key . ' ';
            
            $disc_query = db_query( $sql_disc);
            if( $disc_query && $disc_query->rowCount() > 0) {
            	
            }
            else {
            	$authors_list[$key] = $value;
            }
         }
        
        //dpm($authors_list);
        //dpm($form);
        
        if (empty($form['field_author'][LANGUAGE_NONE][0]['target_id']['#entity']->field_author[LANGUAGE_NONE][0]['target_id'])) {
            $form['field_author'][LANGUAGE_NONE][0]['target_id'] = array(
               '#type' => 'select',
               '#options' => $authors_list,
               '#title' =>'Select Author',
               '#weight' => '3',
               '#default_value' => '',
               '#required'=> TRUE,
               //'#empty_value'=> '',
               '#empty_option'=> '',
               //'#element_validate' => 'options_field_widget_validate',
            );
          }
        
//         $form['submission_guidelines'] = array(
//             '#type' => 'item',
//             '#label' => '<div ><p><b>Disclosure Statement</b></p><p>Each author is required to fill out this form upon acceptance of a manuscript. The editors\' interest extends to those areas relevant to the article that, broadly viewed, could be construed as constituting a conflict of interest or the appearance thereof. A link to this information will be provided at the end of the published manuscript. If there is nothing to disclose, please indicate so in the box provided below. </p></div>',
//             '#required'=> TRUE,
//             '#weight' => '0',
//           );
      
      }
        
      // Hide N/A option for radio buttons
      unset($form['field_consulting_fees_none'][LANGUAGE_NONE]['#options']['_none']);
      unset($form['field_equity_stock_none'][LANGUAGE_NONE]['#options']['_none']);
      unset($form['field_lecture_fees_none'][LANGUAGE_NONE]['#options']['_none']);
      unset($form['field_sponsor_employer'][LANGUAGE_NONE]['#options']['_none']);
      unset($form['field_industry_grant_support'][LANGUAGE_NONE]['#options']['_none']);
      unset($form['field_patents_royalties'][LANGUAGE_NONE]['#options']['_none']);
   
   return $form;
   break;
   } 
  
}


function alz_views_pre_render(&$view){
	//Load the argument for the view (manuscript_id), get the authors, compare to the authors listed in this view and attach the difference to the bottom of the view.
	if($view->name== 'disclosures_in_manuscript' || $view->name == 'manuscript'){
		$manuscript_authors = array();
		//Load the views argument (manuscript id), load the manuscript and get an array of all the author ID's
		$manuscript_nid = $view->args[0];
		
		$manuscript = node_load($manuscript_nid);
		foreach($manuscript->field_author_id[LANGUAGE_NONE] as $mauth){
			//This array consists of all manuscript authors
			if(!empty($mauth['target_id']) && is_numeric($mauth['target_id'])){
				
				$manuscript_authors[] = db_query('SELECT nid FROM {node} WHERE nid ='.$mauth['target_id'])->fetchField();
			}
		}
		
		
		//Get the current view (disclosures_in_manuscripts) and put all authors into array:
		$authors_done = array();
		foreach($view->result as $aut){
			if(!empty($aut->nid) && is_numeric($aut->nid)){
				$disclosure = node_load($aut->nid);
				if(!empty($disclosure->field_author)){
		  		$authid = $disclosure->field_author[LANGUAGE_NONE][0]['target_id'];
		  		if(!empty($authid) && is_numeric($authid)){
						$authors_done[] = db_query('SELECT nid FROM {node} WHERE nid ='.$authid)->fetchField();
					}
				}
			}
	  }
	  
	
	  //Diff the arrays to find those who do not yet have disclosures: 
	  $awaiting_disclosure_array = array_diff($manuscript_authors,$authors_done);
	  	
	  $awaiting_disclosure_array_sorted = array();	
	    
	  foreach($awaiting_disclosure_array as $nid) {
	  	$last_name = db_query('SELECT field_last_name_value FROM {field_data_field_last_name} WHERE entity_id  =' . $nid)->fetchField();
		$full_name = db_query('SELECT title FROM {node} WHERE nid ='. $nid)->fetchField();
		$index = $last_name . $full_name;
		$awaiting_disclosure_array_sorted[$index] = $full_name;
	  }
	  
	  ksort($awaiting_disclosure_array_sorted);
	  
	  $awaiting_disclosure_array = array_values($awaiting_disclosure_array_sorted);
	  	  
	  //Theme the array to display and attach to the bottom of the view (can use attachement_before to place before the view) 
	  if(!empty($awaiting_disclosure_array) && $view->name == 'disclosures_in_manuscript'){
	  	
			$awaiting_disclosure = theme('item_list',array('items' =>$awaiting_disclosure_array));			
			$view->attachment_after = $awaiting_disclosure;
	  }
	  
    
	  if(!empty($awaiting_disclosure_array) && $view->name == 'manuscript'){
	  		$awaiting_disclosure = "";
	  		foreach($awaiting_disclosure_array as $author) {
	  			$display_msg=array('Disclosure not yet completed');
				$awaiting_disclosure .= theme('item_list',array('items' =>$display_msg, 'title'=>$author));				
			}
			$view->attachment_after = $awaiting_disclosure;
	  }
	  
	}
	
}

function _get_manuscript_nid($a, $b) {

$sql = 'SELECT node.nid AS nid
		FROM 
		{node} node
		INNER JOIN {field_data_field_closed} field_data_field_closed ON node.nid = field_data_field_closed.entity_id
		INNER JOIN {field_data_field_number_a} field_data_field_number_a ON node.nid=field_data_field_number_a.entity_id
		INNER JOIN {field_data_field_number_b} field_data_field_number_b ON node.nid=field_data_field_number_b.entity_id
		WHERE ((node.status = :status) AND (node.type = :manuscript) AND (field_data_field_closed.field_closed_value = :closed)
		AND (field_data_field_number_a.field_number_a_value = :aval) AND (field_data_field_number_b.field_number_b_value = :bval) )';
	
		$nid = db_query($sql, array(':closed' => 0, ':status' => 1, ':manuscript' => 'manuscript', ':aval' => $a, ':bval' => $b))->fetchField();
		return $nid;

}

function validate_manuscript($form, &$form_state) {
		
	$a=$form_state['values']['field_manuscript_number_prefix'][LANGUAGE_NONE][0]['value'];
	$b=$form_state['values']['field_number_b'][LANGUAGE_NONE][0]['value'];
		
	$nid = _get_manuscript_nid($a, $b);
	
	//Set the value of the manuscript nid
	
	$form_state['values']['field_manuscript'][LANGUAGE_NONE][0]['target_id']=$nid;

	if($a== NULL || $b = NULL || $nid == NULL) {
		form_set_error('field_number_b', t('Please enter a valid manuscript number'));
	}
}

function validate_disclosure($form, &$form_state) {
	
	$consulting_fees = $form_state['values']['field_consulting_fees_none'][LANGUAGE_NONE][0]['value'];
	$equity_stock = $form_state['values']['field_equity_stock_none'][LANGUAGE_NONE][0]['value'];	 
	$lecture_fees = $form_state['values']['field_lecture_fees_none'][LANGUAGE_NONE][0]['value'];
	$employer = $form_state['values']['field_sponsor_employer'][LANGUAGE_NONE][0]['value'];	
	$grants = $form_state['values']['field_industry_grant_support'][LANGUAGE_NONE][0]['value'];
	$patents = $form_state['values']['field_patents_royalties'][LANGUAGE_NONE][0]['value'];
	$grants_desc = $form_state['values']['field_disclosure_grants'][LANGUAGE_NONE][0]['field_agency'][LANGUAGE_NONE][0]['value'];
	
	$nothing_to_disclose = $form_state['values']['field_nothing_to_disclose'][LANGUAGE_NONE][0]['value'];
	
	if($consulting_fees == 0 && $equity_stock == 0 && $lecture_fees == 0 && $employer == 0 && $grants == 0 && $patents == 0 && $nothing_to_disclose == 0) {
		form_set_error('field_consulting_fees_desc', t('Please select the "Nothing to Disclose" checkbox (below the "Select Author" field) if you have no disclosures to submit.'));
	}
	
	if( $grants == 1 && $grants_desc == NULL) {
		form_set_error('$grants_desc', t('The Grants field is required.'));
	}
	
}


/**
 * Implements hook_node_presave().
 */
function alz_node_presave($node) {
  
  if ($node->type == 'biblio') {
    $date_new = preg_replace('/\s+/', '-', $node->biblio_date);
    //dsm(date('m-d-Y',strtotime($date_new)));
    $node->field_date_published_numeric[LANGUAGE_NONE][0]['value'] = date('Y-m-d',strtotime($date_new));
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function alz_field_formatter_info() {
  $info = array(
      'sort_author' => array( //Machine name of the formatter
      'label' => t('Sort Authors'),
      'field types' => array('entityreference'), 
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function alz_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  
  $manuscript_authors = array(); // Initialize the var
  
  foreach($entity->field_author_id[LANGUAGE_NONE] as $mauth){
  			
			//This array consists of all manuscript authors
			if(!empty($mauth['target_id']) && is_numeric($mauth['target_id'])){
				$last_name = db_query('SELECT field_last_name_value FROM {field_data_field_last_name} WHERE entity_id  ='.$mauth['target_id'])->fetchField();
				$full_name = db_query('SELECT title FROM {node} WHERE nid ='.$mauth['target_id'])->fetchField();
				$index = $last_name . $full_name;
				$manuscript_authors[$index] = $full_name;
			}		
		}
	
	
	ksort($manuscript_authors);		
  	//dsm(implode(", ", $manuscript_authors));
    
    //dsm($manuscript_authors);
    
    $element[0] = array(
          '#theme' => 'alz_sorted',
          '#items' => $manuscript_authors,
        );
  
  return $element;
}


/**
 * Implements hook_theme().
 */
function alz_theme($existing, $type, $theme, $path) {
  return array(
    'alz_sorted' => array(
    'render element' => 'element',
    ),
  );
}

/**
 * Theme function to render sorted comma separated lists.
 */
function theme_alz_sorted($variables) {
  $items = $variables['element']['#items'];

  // Generate a comma-separated list.
  $output = implode(", ", $items);


  return $output;
}


?>